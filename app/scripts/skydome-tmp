

			// if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container;

			var camera, scene, renderer;
			var cameraCube, sceneCube;

			var mesh, lightMesh, geometry;
			var spheres = [];

			var directionalLight, pointLight;

			var mouseX = 0, mouseY = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			document.addEventListener( 'mousemove', onDocumentMouseMove, false );

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 100000 );
				camera.position.z = 3200;

				cameraCube = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 100000 );

				scene = new THREE.Scene();
				sceneCube = new THREE.Scene();

				var geometry = new THREE.SphereGeometry( 100, 32, 16 );

				var path = "textures/cube/skybox/";
				var format = '.jpg';
				

	var urlPrefix	= "images/";
	var urls = [ urlPrefix + "posx.jpg", urlPrefix + "negx.jpg",
			urlPrefix + "posy.jpg", urlPrefix + "negy.jpg",
			urlPrefix + "posz.jpg", urlPrefix + "negz.jpg" ];
	
				var textureCube = THREE.ImageUtils.loadTextureCube( urls, new THREE.CubeRefractionMapping() );
				var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube, refractionRatio: 0.95 } );

				// for ( var i = 0; i < 500; i ++ ) {

				// 	var mesh = new THREE.Mesh( geometry, material );

				// 	mesh.position.x = Math.random() * 10000 - 5000;
				// 	mesh.position.y = Math.random() * 10000 - 5000;
				// 	mesh.position.z = Math.random() * 10000 - 5000;

				// 	mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;

				// 	scene.add( mesh );

				// 	spheres.push( mesh );

				// }

				// Skybox

				var shader = THREE.ShaderLib[ "cube" ];
				shader.uniforms[ "tCube" ].value = textureCube;

				var material = new THREE.ShaderMaterial( {

					fragmentShader: shader.fragmentShader,
					vertexShader: shader.vertexShader,
					uniforms: shader.uniforms,
					depthWrite: false,
					side: THREE.BackSide

				} ),

				mesh = new THREE.Mesh( new THREE.CubeGeometry( 100, 100, 100 ), material );
				sceneCube.add( mesh );

				//

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.autoClear = false;
				container.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2,
				windowHalfY = window.innerHeight / 2,

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				cameraCube.aspect = window.innerWidth / window.innerHeight;
				cameraCube.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove(event) {

				mouseX = ( event.clientX - windowHalfX ) * 10;
				mouseY = ( event.clientY - windowHalfY ) * 10;

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {

				var timer = 0.0001 * Date.now();

				// for ( var i = 0, il = spheres.length; i < il; i ++ ) {

				// 	var sphere = spheres[ i ];

				// 	sphere.position.x = 5000 * Math.cos( timer + i );
				// 	sphere.position.y = 5000 * Math.sin( timer + i * 1.1 );

				// }

				camera.position.x += ( mouseX - camera.position.x ) * .05;
				camera.position.y += ( - mouseY - camera.position.y ) * .05;

				camera.lookAt( scene.position );
				cameraCube.rotation.copy( camera.rotation );

				renderer.render( sceneCube, cameraCube );
				renderer.render( scene, camera );

			}

		

var hexagon = new THREE.Geometry();

	r = 120;
	d = 50;
	hexagon.vertices.push( new THREE.Vector3( r*0.87, r*0.5, 0 ) );
	hexagon.vertices.push( new THREE.Vector3( r*0.87, r*0.5, -d ) );
	hexagon.vertices.push( new THREE.Vector3( r*0, r*1 , 0 ) );
	hexagon.vertices.push( new THREE.Vector3( r*0, r*1 , -d ) );
	hexagon.vertices.push( new THREE.Vector3(  r*-0.87, r*0.5, 0 ) );
	hexagon.vertices.push( new THREE.Vector3(  r*-0.87, r*0.5, -d ) );
	hexagon.vertices.push( new THREE.Vector3(  r*-0.87, r*-0.5, 0 ) );
	hexagon.vertices.push( new THREE.Vector3(  r*-0.87, r*-0.5, -d ) );
	hexagon.vertices.push( new THREE.Vector3( r*0, r*-1 , 0 ) );
	hexagon.vertices.push( new THREE.Vector3( r*0, r*-1 , -d ) );
	hexagon.vertices.push( new THREE.Vector3(  r*0.87, r*-0.5, 0 ) );
	hexagon.vertices.push( new THREE.Vector3(  r*0.87, r*-0.5, -d ) );

	for (i=0;i<9;i+=2){
		hexagon.faces.push( new THREE.Face3( i+0, i+1, i+2 ) );
		hexagon.faces.push( new THREE.Face3( i+2, i+1, i+3 ) );
	}
		hexagon.faces.push( new THREE.Face3( 10, 11, 0 ) );
		hexagon.faces.push( new THREE.Face3( 1, 11, 0 ) );


	// hexagon.computeBoundingSphere();


	var material = new THREE.MeshBasicMaterial({
		color:0x1a1a1F,
		shading: THREE.FlatShading,
		transparent: true, opacity: 0.8

	})

      var plane = new THREE.Mesh(hexagon, material);
      // plane.overdraw = true;
      // plane.color.setHex( 0xffffff );
 plane.doubleSided = true;

plane.material.side = THREE.DoubleSide
      scene.add(plane);
 	var material2 = new THREE.MeshBasicMaterial({
		color:0xfa1a1F
	})
 